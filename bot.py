import asyncio
import random
import os
from telethon import TelegramClient, events
import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
config_file = "config.json"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (API ID –∏ API Hash)
def load_config():
    if os.path.exists(config_file):
        with open(config_file, 'r') as file:
            config = json.load(file)
        return config.get('API_ID'), config.get('API_HASH')
    return None, None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (API ID –∏ API Hash)
def save_config(api_id, api_hash):
    config = {
        "API_ID": api_id,
        "API_HASH": api_hash
    }
    with open(config_file, 'w') as file:
        json.dump(config, file)

# –ó–∞–ø—Ä–æ—Å API ID –∏ API Hash, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
def get_api_credentials():
    api_id, api_hash = load_config()
    if api_id and api_hash:
        return api_id, api_hash
    else:
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID –∏ API Hash.")
        api_id = input("API ID: ")
        api_hash = input("API Hash: ")
        save_config(api_id, api_hash)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        return api_id, api_hash

# –ü–æ–ª—É—á–∞–µ–º API ID –∏ API Hash
API_ID, API_HASH = get_api_credentials()

# –í–∞—à ID –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)
OWNER_ID = 1688880140  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('shizuku_bot', API_ID, API_HASH)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot_token = None

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–≤—Ç–æ–ø–µ—á–∞—Ç–∏
auto_typing = False
auto_typing_message = ""

# –†–µ–∂–∏–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
log_modes = {
    "all": False,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    "ls": False,   # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    "chats": {}    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def send_log_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∏—Ä—É—é—â–∏–π –±–æ—Ç, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω, —Ç–æ–ª—å–∫–æ –≤–∞–º."""
    if bot_token:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": OWNER_ID,  # –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–º
            "text": message
        }
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {response.status_code}")

# --- –ö–æ–º–∞–Ω–¥–∞ .—Ç–æ–∫–µ–Ω ---
@client.on(events.NewMessage(pattern=r"\.—Ç–æ–∫–µ–Ω (.+)"))
async def set_token(event):
    global bot_token
    if event.sender_id == OWNER_ID:
        bot_token = event.pattern_match.group(1)
        msg = await event.respond(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bot_token}")
        await send_log_message(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await msg.edit(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bot_token}")
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥—ã .–ª–æ–≥ ---
@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ –≤—Å–µ"))
async def log_all_chats(event):
    if event.sender_id == OWNER_ID:
        log_modes["all"] = True
        msg = await event.respond("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ.")
        await msg.edit("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ –ª—Å"))
async def log_ls(event):
    if event.sender_id == OWNER_ID:
        log_modes["ls"] = True
        msg = await event.respond("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ.")
        await msg.edit("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ (@?\w+)"))
async def log_chat(event):
    chat_identifier = event.pattern_match.group(1)
    if event.sender_id == OWNER_ID:
        if chat_identifier.startswith("@"):
            log_modes["chats"][chat_identifier] = True
        else:
            log_modes["chats"][int(chat_identifier)] = True
        msg = await event.respond(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ '{chat_identifier}' –≤–∫–ª—é—á–µ–Ω–æ.")
        await msg.edit(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ '{chat_identifier}' –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–∑–∞–¥–∞—á–∏ ---
@client.on(events.NewMessage(pattern=r"\.–∑–∞–¥–∞—á–∏"))
async def show_tasks(event):
    if event.sender_id == OWNER_ID:
        tasks_status = "üìú –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:\n"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        tasks_status += f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: {'–≤–∫–ª—é—á–µ–Ω–æ' if log_modes['all'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        tasks_status += f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–æ' if log_modes['ls'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ ID –∏–ª–∏ @username
        if log_modes["chats"]:
            tasks_status += "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ ID –∏–ª–∏ @username:\n"
            for chat, enabled in log_modes["chats"].items():
                tasks_status += f"  - {chat}: {'–≤–∫–ª—é—á–µ–Ω–æ' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ç–∞–π–ø–∞
        tasks_status += f"–ê–≤—Ç–æ—Ç–∞–π–ø: {'–≤–∫–ª—é—á–µ–Ω' if auto_typing else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"

        msg = await event.respond(tasks_status)
        await msg.edit(tasks_status)
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–∞–≤—Ç–æ—Ç–∞–π–ø ---
@client.on(events.NewMessage(pattern=r"\.–∞–≤—Ç–æ—Ç–∞–π–ø (.+)"))
async def start_auto_typing(event):
    global auto_typing, auto_typing_message
    if event.sender_id == OWNER_ID:
        if auto_typing:
            msg = await event.respond("‚ùå –ê–≤—Ç–æ—Ç–∞–π–ø —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
            await msg.edit("‚ùå –ê–≤—Ç–æ—Ç–∞–π–ø —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
            return
        auto_typing_message = event.pattern_match.group(1)
        auto_typing = True
        msg = await event.respond(f"‚úÖ –ê–≤—Ç–æ—Ç–∞–π–ø –≤–∫–ª—é—á–µ–Ω. –ë—É–¥–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {auto_typing_message}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        async def simulate_typing():
            for i in range(1, len(auto_typing_message) + 1):
                # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
                await client.send_typing(OWNER_ID)
                await asyncio.sleep(random.uniform(0.1, 0.5))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏
        await simulate_typing()

        await msg.edit(f"‚úÖ –ê–≤—Ç–æ—Ç–∞–π–ø –≤–∫–ª—é—á–µ–Ω. –ë—É–¥–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {auto_typing_message}")

    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–∞–≤—Ç–æ—Ç–∞–π–ø —Å—Ç–æ–ø ---
@client.on(events.NewMessage(pattern=r"\.–∞–≤—Ç–æ—Ç–∞–π–ø —Å—Ç–æ–ø"))
async def stop_auto_typing(event):
    global auto_typing
    if event.sender_id == OWNER_ID:
        if not auto_typing:
            msg = await event.respond("‚ùå –ê–≤—Ç–æ—Ç–∞–π–ø –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω.")
            await msg.edit("‚ùå –ê–≤—Ç–æ—Ç–∞–π–ø –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω.")
            return
        auto_typing = False
        msg = await event.respond("‚úÖ –ê–≤—Ç–æ—Ç–∞–π–ø –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await msg.edit("‚úÖ –ê–≤—Ç–æ—Ç–∞–π–ø –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
@client.on(events.MessageEdited)
async def on_message_edited(event):
    if log_modes["all"] or log_modes["ls"]:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        user = await client.get_entity(event.sender_id)
        chat = await client.get_entity(event.chat_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç
        user_link = f"<a href='tg://user?id={user.id}'>@{user.username if user.username else user.id}</a>"
        chat_link = f"<a href='https://t.me/c/{str(chat.id)[4:]}/{event.id}'>–ß–∞—Ç</a>"

        log_message = f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_link} –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_link}:\n{event.text}"
        msg = await send_log_message(log_message)
        await msg.edit(f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_link} –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_link}:\n{event.text}")

    if log_modes["chats"].get(event.chat_id, False):
        user = await client.get_entity(event.sender_id)
        chat = await client.get_entity(event.chat_id)
        
        user_link = f"<a href='tg://user?id={user.id}'>@{user.username if user.username else user.id}</a>"
        chat_link = f"<a href='https://t.me/c/{str(chat.id)[4:]}/{event.id}'>–ß–∞—Ç</a>"

        log_message = f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_link} –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_link}:\n{event.text}"
        msg = await send_log_message(log_message)
        await msg.edit(f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_link} –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_link}:\n{event.text}")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
@client.on(events.MessageDeleted)
async def on_message_deleted(event):
    if log_modes["all"] or log_modes["ls"]:
        user = await client.get_entity(event.sender_id)
        chat = await client.get_entity(event.chat_id)
        
        user_link = f"<a href='tg://user?id={user.id}'>@{user.username if user.username else user.id}</a>"
        chat_link = f"<a href='https://t.me/c/{str(chat.id)[4:]}/{event.id}'>–ß–∞—Ç</a>"

        deleted_message = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –æ—Ç {user_link} –≤ —á–∞—Ç–µ {chat_link}."
        msg = await send_log_message(deleted_message)
        await msg.edit(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –æ—Ç {user_link} –≤ —á–∞—Ç–µ {chat_link}.")

    for chat_id in log_modes["chats"]:
        if chat_id == event.chat_id or log_modes["all"]:
            user = await client.get_entity(event.sender_id)
            chat = await client.get_entity(event.chat_id)
            
            user_link = f"<a href='tg://user?id={user.id}'>@{user.username if user.username else user.id}</a>"
            chat_link = f"<a href='https://t.me/c/{str(chat.id)[4:]}/{event.id}'>–ß–∞—Ç</a>"

            deleted_message = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_link} –æ—Ç {user_link}."
            msg = await send_log_message(deleted_message)
            await msg.edit(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_link} –æ—Ç {user_link}.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–ø–∏–Ω–≥ ---
@client.on(events.NewMessage(pattern=r"\.–ø–∏–Ω–≥"))
async def ping(event):
    if event.sender_id == OWNER_ID:
        start_time = time.time()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        msg = await event.respond("üì° –ü–∏–Ω–≥—É–µ–º...")
        ping_time = time.time() - start_time
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º
        await msg.edit(f"üì° –ü–∏–Ω–≥: {ping_time * 1000:.2f} ms")
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–ø–æ–º–æ—â—å ---
@client.on(events.NewMessage(pattern=r"\.–ø–æ–º–æ—â—å"))
async def help_command(event):
    if event.sender_id == OWNER_ID:
        help_text = """
        –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
        .—Ç–æ–∫–µ–Ω <token> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        .–ª–æ–≥ –≤—Å–µ - –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.
        .–ª–æ–≥ –ª—Å - –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        .–ª–æ–≥ <chat> - –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
        .–∑–∞–¥–∞—á–∏ - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏.
        .–∞–≤—Ç–æ—Ç–∞–π–ø <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–∞–π–ø (–∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞).
        .–∞–≤—Ç–æ—Ç–∞–π–ø —Å—Ç–æ–ø - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ç–∞–π–ø.
        .–ø–∏–Ω–≥ - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥.
        """
        msg = await event.respond(help_text)
        await msg.edit(help_text)
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("–ë–æ—Ç Shizuku –∑–∞–ø—É—â–µ–Ω.")
    await client.start()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    await client.run_until_disconnected()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π

if __name__ == "__main__":
    asyncio.run(main())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
