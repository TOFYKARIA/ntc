import asyncio
import random
import os
from telethon import TelegramClient, events
import requests
import time

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
API_ID = 'your_api_id'
API_HASH = 'your_api_hash'
OWNER_ID = 123456789  # –í–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('shizuku_bot', API_ID, API_HASH)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot_token = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_modes = {
    "all": False,
    "ls": False,
    "chats": {}
}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∞–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏–∏
auto_mode = None

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def send_log_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∏—Ä—É—é—â–∏–π –±–æ—Ç, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω, —Ç–æ–ª—å–∫–æ –≤–∞–º."""
    if bot_token:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": OWNER_ID,  # –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–º
            "text": message
        }
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {response.status_code}")

# --- –ö–æ–º–∞–Ω–¥–∞ .—Ç–æ–∫–µ–Ω ---
@client.on(events.NewMessage(pattern=r"\.—Ç–æ–∫–µ–Ω (.+)"))
async def set_token(event):
    global bot_token
    if event.sender_id == OWNER_ID:
        bot_token = event.pattern_match.group(1)
        await event.respond(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bot_token}")
        await send_log_message(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥—ã .–ª–æ–≥ ---
@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ –≤—Å–µ"))
async def log_all_chats(event):
    if event.sender_id == OWNER_ID:
        log_modes["all"] = True
        await event.respond("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ –ª—Å"))
async def log_ls(event):
    if event.sender_id == OWNER_ID:
        log_modes["ls"] = True
        await event.respond("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ (@?\w+)"))
async def log_chat(event):
    chat_identifier = event.pattern_match.group(1)
    if event.sender_id == OWNER_ID:
        if chat_identifier.startswith("@"):
            log_modes["chats"][chat_identifier] = True
        else:
            log_modes["chats"][int(chat_identifier)] = True
        await event.respond(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ '{chat_identifier}' –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–∑–∞–¥–∞—á–∏ ---
@client.on(events.NewMessage(pattern=r"\.–∑–∞–¥–∞—á–∏"))
async def show_tasks(event):
    if event.sender_id == OWNER_ID:
        tasks_status = "üìú –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:\n"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        tasks_status += f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: {'–≤–∫–ª—é—á–µ–Ω–æ' if log_modes['all'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        tasks_status += f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–æ' if log_modes['ls'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ ID –∏–ª–∏ @username
        if log_modes["chats"]:
            tasks_status += "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ ID –∏–ª–∏ @username:\n"
            for chat, enabled in log_modes["chats"].items():
                tasks_status += f"  - {chat}: {'–≤–∫–ª—é—á–µ–Ω–æ' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"

        # –ê–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏–∏
        if auto_mode:
            tasks_status += f"–ê–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {auto_mode['type']} (—Ç–∏–ø: {auto_mode['description']})"
        else:
            tasks_status += "–ê–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω–∞"

        await event.respond(tasks_status)
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–∞–≤—Ç–æ [1-5] ---
@client.on(events.NewMessage(pattern=r"\.–∞–≤—Ç–æ ([1-5])"))
async def set_auto_mode(event):
    global auto_mode
    if event.sender_id == OWNER_ID:
        mode = int(event.pattern_match.group(1))
        
        if auto_mode:  # –ï—Å–ª–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏—è, –Ω–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å –¥—Ä—É–≥—É—é
            await event.respond("‚ùå –£–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏—è. –û—Ç–∫–ª—é—á–∏—Ç–µ –µ–µ –∫–æ–º–∞–Ω–¥–æ–π .-–∞–≤—Ç–æ.")
            return
        
        if mode == 1:
            auto_mode = {"type": "–ê–≤—Ç–æ–ø–µ—á–∞—Ç–∞–ª–∫–∞", "description": "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è"}
            while auto_mode:
                await client.send_message(OWNER_ID, f"–ê–≤—Ç–æ–ø–µ—á–∞—Ç–∞–ª–∫–∞: {random.choice(['–ü—Ä–∏–≤–µ—Ç!', '–ö–∞–∫ –¥–µ–ª–∞?', '–Ø —Ç—É—Ç'])}")
                await asyncio.sleep(1)
        elif mode == 2:
            auto_mode = {"type": "–ê–≤—Ç–æ –∑–∞–ø–∏—Å—å –∫—Ä—É–∂–∫–∞", "description": "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –≤ —á–∞—Ç–µ"}
            while auto_mode:
                await client.send_message(OWNER_ID, "–ê–≤—Ç–æ –∑–∞–ø–∏—Å—å –∫—Ä—É–∂–∫–∞: –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø–∏—Å—å...")
                await asyncio.sleep(1)
        elif mode == 3:
            auto_mode = {"type": "–ò–º–∏—Ç–∞—Ü–∏—è –∏–≥—Ä—ã", "description": "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä—ã"}
            while auto_mode:
                await client.send_message(OWNER_ID, "–ò–≥—Ä–∞—é –≤ –∏–≥—Ä—É...")
                await asyncio.sleep(1)
        elif mode == 4:
            auto_mode = {"type": "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ", "description": "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–æ—Ç–æ"}
            while auto_mode:
                await client.send_file(OWNER_ID, 'path_to_photo.jpg')
                await asyncio.sleep(1)
        elif mode == 5:
            auto_mode = {"type": "–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", "description": "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç"}
            while auto_mode:
                await client.send_file(OWNER_ID, 'path_to_document.pdf')
                await asyncio.sleep(1)

        await event.respond(f"‚úÖ –ê–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏—è {auto_mode['type']} –≤–∫–ª—é—á–µ–Ω–∞.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .-–∞–≤—Ç–æ ---
@client.on(events.NewMessage(pattern=r"\.\-–∞–≤—Ç–æ"))
async def disable_auto_mode(event):
    global auto_mode
    if event.sender_id == OWNER_ID:
        auto_mode = None
        await event.respond("‚úÖ –ê–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
@client.on(events.MessageEdited)
async def on_message_edited(event):
    if log_modes["all"] or log_modes["ls"]:
        log_message = f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.sender_id} –∏–∑–º–µ–Ω–µ–Ω–æ:\n{event.text}"
        await send_log_message(log_message)

    if log_modes["chats"].get(event.chat_id, False):
        log_message = f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.sender_id} –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ {event.chat_id}:\n{event.text}"
        await send_log_message(log_message)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
@client.on(events.MessageDeleted)
async def on_message_deleted(event):
    if log_modes["all"] or log_modes["ls"]:
        deleted_message = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –æ—Ç {event.sender_id}."
        await send_log_message(deleted_message)

    for chat_id in log_modes["chats"]:
        if chat_id == event.chat_id or log_modes["all"]:
            deleted_message = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {event.chat_id} –æ—Ç {event.sender_id}."
            await send_log_message(deleted_message)

# --- –ö–æ–º–∞–Ω–¥–∞ .–ø–∏–Ω–≥ ---
@client.on(events.NewMessage(pattern=r"\.–ø–∏–Ω–≥"))
async def ping(event):
    if event.sender_id == OWNER_ID:
        start_time = time.time()
        await event.respond("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏...")
        end_time = time.time()
        delay = round((end_time - start_time) * 1000)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        await event.respond(f"üì° –ó–∞–¥–µ—Ä–∂–∫–∞: {delay}ms")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("–ë–æ—Ç Shizuku –∑–∞–ø—É—â–µ–Ω.")
    await client.start()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    await client.run_until_disconnected()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π

if __name__ == "__main__":
    asyncio.run(main())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
