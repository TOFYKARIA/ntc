import asyncio
import os
import json
import requests
from telethon import TelegramClient, events
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
config_file = "config.json"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (API ID –∏ API Hash)
def load_config():
    if os.path.exists(config_file):
        with open(config_file, 'r') as file:
            config = json.load(file)
        return config.get('API_ID'), config.get('API_HASH')
    return None, None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (API ID –∏ API Hash)
def save_config(api_id, api_hash):
    config = {
        "API_ID": api_id,
        "API_HASH": api_hash
    }
    with open(config_file, 'w') as file:
        json.dump(config, file)

# –ó–∞–ø—Ä–æ—Å API ID –∏ API Hash, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
def get_api_credentials():
    api_id, api_hash = load_config()
    if api_id and api_hash:
        return api_id, api_hash
    else:
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID –∏ API Hash.")
        api_id = input("API ID: ")
        api_hash = input("API Hash: ")
        save_config(api_id, api_hash)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        return api_id, api_hash

# –ü–æ–ª—É—á–∞–µ–º API ID –∏ API Hash
API_ID, API_HASH = get_api_credentials()

# –í–∞—à ID –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)
OWNER_ID = 1688880140  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('shizuku_bot', API_ID, API_HASH)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot_token = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_modes = {
    "all": False,
    "ls": False,
    "chats": {}
}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∞–≤—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏–∏
auto_mode = None

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def send_log_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∏—Ä—É—é—â–∏–π –±–æ—Ç, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω, —Ç–æ–ª—å–∫–æ –≤–∞–º."""
    if bot_token:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": OWNER_ID,  # –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–º
            "text": message
        }
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {response.status_code}")

# --- –ö–æ–º–∞–Ω–¥–∞ .—Ç–æ–∫–µ–Ω ---
@client.on(events.NewMessage(pattern=r"\.—Ç–æ–∫–µ–Ω (.+)"))
async def set_token(event):
    global bot_token
    if event.sender_id == OWNER_ID:
        bot_token = event.pattern_match.group(1)
        await event.respond(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bot_token}")
        await send_log_message(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥—ã .–ª–æ–≥ ---
@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ –≤—Å–µ"))
async def log_all_chats(event):
    if event.sender_id == OWNER_ID:
        log_modes["all"] = True
        await event.respond("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ –ª—Å"))
async def log_ls(event):
    if event.sender_id == OWNER_ID:
        log_modes["ls"] = True
        await event.respond("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥ (@?\w+)"))
async def log_chat(event):
    chat_identifier = event.pattern_match.group(1)
    if event.sender_id == OWNER_ID:
        if chat_identifier.startswith("@"):
            log_modes["chats"][chat_identifier] = True
        else:
            log_modes["chats"][int(chat_identifier)] = True
        await event.respond(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ '{chat_identifier}' –≤–∫–ª—é—á–µ–Ω–æ.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–∑–∞–¥–∞—á–∏ ---
@client.on(events.NewMessage(pattern=r"\.–∑–∞–¥–∞—á–∏"))
async def show_tasks(event):
    if event.sender_id == OWNER_ID:
        tasks_status = "üìú –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:\n"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        tasks_status += f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: {'–≤–∫–ª—é—á–µ–Ω–æ' if log_modes['all'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        tasks_status += f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–æ' if log_modes['ls'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ ID –∏–ª–∏ @username
        if log_modes["chats"]:
            tasks_status += "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ ID –∏–ª–∏ @username:\n"
            for chat, enabled in log_modes["chats"].items():
                tasks_status += f"  - {chat}: {'–≤–∫–ª—é—á–µ–Ω–æ' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"

        await event.respond(tasks_status)
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–ø–∏–Ω–≥ ---
@client.on(events.NewMessage(pattern=r"\.–ø–∏–Ω–≥"))
async def ping(event):
    if event.sender_id == OWNER_ID:
        start_time = time.time()
        msg = await event.respond("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏...")
        end_time = time.time()
        delay = round((end_time - start_time) * 1000)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        await msg.edit(f"üì° –ó–∞–¥–µ—Ä–∂–∫–∞: {delay}ms")
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–ø–æ–º–æ—â—å ---
@client.on(events.NewMessage(pattern=r"\.–ø–æ–º–æ—â—å"))
async def help_command(event):
    if event.sender_id == OWNER_ID:
        help_message = """
        ü§ñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

        1. `.—Ç–æ–∫–µ–Ω <token>` - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        2. `.–ª–æ–≥ –≤—Å–µ` - –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.
        3. `.–ª–æ–≥ –ª—Å` - –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        4. `.–ª–æ–≥ @username` - –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ @username.
        5. `.–∑–∞–¥–∞—á–∏` - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ).
        6. `.–ø–∏–Ω–≥` - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–µ—Ä–∞.
        7. `.–ª–æ–≥—Å—Ç–æ–ø` - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        ü§ñ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
        - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        
        üì≤ –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @neetchan.
        """
        msg = await event.respond(help_message)
        await msg.edit(help_message)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
    else:
        msg = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await msg.edit("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –ö–æ–º–∞–Ω–¥–∞ .–ª–æ–≥—Å—Ç–æ–ø ---
@client.on(events.NewMessage(pattern=r"\.–ª–æ–≥—Å—Ç–æ–ø"))
async def log_stop(event):
    if event.sender_id == OWNER_ID:
        log_modes["all"] = False
        log_modes["ls"] = False
        log_modes["chats"] = {}
        await event.respond("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    else:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
@client.on(events.MessageEdited)
async def on_message_edited(event):
    if log_modes["all"] or log_modes["ls"]:
        log_message = f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <a href='tg://user?id={event.sender_id}'>@{event.sender.username}</a> –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ <a href='https://t.me/c/{event.chat_id}/{event.message.id}'>–ß–∞—Ç</a>: {event.text}"
        await send_log_message(log_message)

    if log_modes["chats"].get(event.chat_id, False):
        log_message = f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <a href='tg://user?id={event.sender_id}'>@{event.sender.username}</a> –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —á–∞—Ç–µ <a href='https://t.me/c/{event.chat_id}/{event.message.id}'>–ß–∞—Ç</a>: {event.text}"
        await send_log_message(log_message)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
@client.on(events.MessageDeleted)
async def on_message_deleted(event):
    if log_modes["all"] or log_modes["ls"]:
        deleted_message = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –æ—Ç <a href='tg://user?id={event.sender_id}'>@{event.sender.username}</a>."
        await send_log_message(deleted_message)

    for chat_id in log_modes["chats"]:
        if chat_id == event.chat_id or log_modes["all"]:
            deleted_message = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ <a href='https://t.me/c/{event.chat_id}/{event.message.id}'>–ß–∞—Ç</a> –æ—Ç <a href='tg://user?id={event.sender_id}'>@{event.sender.username}</a>."
            await send_log_message(deleted_message)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("–ë–æ—Ç Shizuku –∑–∞–ø—É—â–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
    await client.start()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    await client.run_until_disconnected()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π

if __name__ == "__main__":
    asyncio.run(main())
