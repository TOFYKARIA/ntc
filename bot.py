import os
import requests
import asyncio
from telethon import TelegramClient, events
from telethon.tl.functions.messages import CreateChatRequest
from telethon.tl.functions.messages import SendMessageRequest

# –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
API_ID = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API_ID: ")
API_HASH = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API_HASH: ")
OWNER_ID = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: "))

SESSION_NAME = "shizuku"
bot_token = None  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ª–æ–≥–∏

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
MODULES_DIR = "./modules"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
async def get_logs_bot(token):
    global bot_token
    bot_token = token

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python —Ñ–∞–π–ª–∞ ---
@client.on(events.NewMessage(pattern=r"/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (.+)"))
async def install_module(event):
    url = event.pattern_match.group(1).strip()
    if event.sender_id == OWNER_ID:
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥—É–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not os.path.exists(MODULES_DIR):
                os.makedirs(MODULES_DIR)
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(url)
            if response.status_code == 200:
                file_name = url.split("/")[-1]
                file_path = os.path.join(MODULES_DIR, file_name)
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                if bot_token:
                    await send_log_message(f"‚úÖ –ú–æ–¥—É–ª—å '{file_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            else:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è —Å URL: {url}")
                if bot_token:
                    await send_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è —Å URL: {url}")
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è: {e}")
            if bot_token:
                await send_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è: {str(e)}")
    else:
        await event.edit("‚ùå [–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞]")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–ø–æ–º–æ—â—å) ---
@client.on(events.NewMessage(pattern=r"/–ø–æ–º–æ—â—å"))
async def help_command(event):
    if event.sender_id == OWNER_ID:
        help_text = """
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        
        /—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å [URL] - –°–∫–∞—á–∏–≤–∞–µ—Ç Python —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É –º–æ–¥—É–ª–µ–π.
        /–ø–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        /-—É–¥–∞–ª–∏—Ç—å [–∏–º—è —Ñ–∞–π–ª–∞] - –£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å (—Ñ–∞–π–ª).
        /—Ç–æ–∫–µ–Ω [—Ç–æ–∫–µ–Ω] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –±–æ—Ç).
        """
        await event.edit(help_text)
        if bot_token:
            await send_log_message("üìú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å.")
    else:
        await event.edit("‚ùå [–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞]")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è ---
@client.on(events.NewMessage(pattern=r"/-—É–¥–∞–ª–∏—Ç—å (.+)"))
async def remove_module(event):
    module_name = event.pattern_match.group(1).strip()
    if event.sender_id == OWNER_ID:
        try:
            module_path = os.path.join(MODULES_DIR, module_name)
            if os.path.exists(module_path):
                os.remove(module_path)
                await event.edit(f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
                if bot_token:
                    await send_log_message(f"‚úÖ –ú–æ–¥—É–ª—å '{module_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
            else:
                await event.edit(f"‚ùå –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                if bot_token:
                    await send_log_message(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        except Exception as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {e}")
            if bot_token:
                await send_log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è '{module_name}': {str(e)}")
    else:
        await event.edit("‚ùå [–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞]")

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
@client.on(events.NewMessage(pattern=r"/—Ç–æ–∫–µ–Ω (.+)"))
async def set_token(event):
    global bot_token
    if event.sender_id == OWNER_ID:
        bot_token = event.pattern_match.group(1).strip()
        await event.edit(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bot_token}")
        await send_log_message(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await event.edit("‚ùå [–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞]")

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ –±–æ—Ç ---
async def send_log_message(message):
    if bot_token:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            payload = {
                "chat_id": OWNER_ID,
                "text": message
            }
            response = requests.post(url, data=payload)
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {response.status_code}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")
    else:
        print("–¢–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    print("Shizuku –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
    await client.start()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    await client.run_until_disconnected()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
